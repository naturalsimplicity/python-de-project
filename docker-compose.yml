version: '3.8'

x-airflow-common:
  &airflow-common
  build: airflow/
  env_file:
    - airflow/.env-dev
  volumes:
    - ./airflow/dags:/usr/local/airflow/dags
    - ./airflow/logs:/usr/local/airflow/logs
    - ./airflow/config:/usr/local/airflow/config
    - ./airflow/plugins:/usr/local/airflow/plugins
  depends_on:
    airflow-postgres:
      condition: service_healthy
  logging:
    options:
      max-size: 10m
      max-file: "3"

services:
  postgres-origin:
    image: postgres:latest
    container_name: postgres-origin
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGPORT: 5433
    ports:
      - 5433:5433
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: psql postgresql://postgres_user:postgres_password@postgres-origin:5433/postgres_db
      interval: 5s
      retries: 10
  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql_root_password
      MYSQL_DATABASE: mysql_db
      MYSQL_USER: mysql_user
      MYSQL_PASSWORD: mysql_password
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - 3307:3306
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'mysql_user', '-p''mysql_password''']
      interval: 10s
      retries: 10
      start_period: 30s
  kafka:
    image: apache/kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/opt/kafka
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9093 || exit 1
      interval: 10s
      retries: 10
      start_period: 30s
  spark-master:
    image: docker.io/bitnami/spark:3.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - 8081:8080
      - 7077:7077
  spark-worker:
    image: docker.io/bitnami/spark:3.5
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
  producer:
    build: producer/
    container_name: producer
    depends_on:
      postgres-origin:
        condition: service_healthy
      kafka:
        condition: service_healthy
  consumer:
    build: consumer/
    container_name: consumer
    depends_on:
      mysql:
        condition: service_healthy
      spark-master:
        condition: service_started
      kafka:
        condition: service_healthy
  airflow-postgres:
    image: postgres:13
    env_file:
      airflow/.env-dev
    logging:
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
  airflow-webserver:
    <<: *airflow-common
    restart: always
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]" ]
      interval: 30s
      timeout: 30s
      retries: 3
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    ports:
      - "8793:8793"
#  jupyter:
#    build: jupiter/
#    ports:
#      - 8889:8888
#    volumes:
#      - jupyter-data:/home/jovyan/work
#    command: start-notebook.py --NotebookApp.token='my-token'
volumes:
  postgres-data:
  kafka-data:
  mysql-data:
#  jupyter-data:
    